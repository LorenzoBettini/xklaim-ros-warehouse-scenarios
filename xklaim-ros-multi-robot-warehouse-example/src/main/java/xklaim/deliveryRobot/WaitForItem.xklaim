package xklaim.deliveryRobot

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import messages.ContactsState
import messages.XklaimToRosConnection
import ros.SubscriptionRequestMsg

import static xklaim.deliveryRobot.DeliveryRobotConstants.*

proc WaitForItem(String robotId) {
	val local = self
	
	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(ROS_BRIDGE_SOCKET_URI)

	// subscribe to the pressure sensor for detecting the presence of the item in the bowl
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/" + robotId + "/pressure_sensor_state").setType("gazebo_msgs/ContactsState").
			setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			var mapper = new ObjectMapper()
			var JsonNode rosMsgNode = data.get("msg")
			var ContactsState state = mapper.treeToValue(rosMsgNode, ContactsState)

			if (!state.states.isEmpty && state.states.get(0).total_wrench.force.z != 0.0) {
				// notify that the item is loaded in the delivery robot
				out(ITEM_LOADED)@local

				// unsubscribe from the pressure sensor topic
				bridge.unsubscribe("/" + robotId + "/pressure_sensor_state")
			}
		]
	)

}