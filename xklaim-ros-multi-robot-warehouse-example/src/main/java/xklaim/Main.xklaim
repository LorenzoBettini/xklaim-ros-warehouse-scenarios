package xklaim

import xklaim.arm.ArmBehaviour
import xklaim.deliveryRobot.DeliveryRobotBehaviour

import static xklaim.GlobalConstants.*

net MRS physical "localhost:9999" {
	node Arm {
		eval(new ArmBehaviour())@self
	}

	node DeliveryRobot1 {
		val robotId = "robot1"
		val sector ="sector1"

		eval(new DeliveryRobotBehaviour(robotId,sector,Arm))@self
	}

	node DeliveryRobot2 {
		val robotId = "robot2"
		val sector ="sector2"

		eval(new DeliveryRobotBehaviour(robotId,sector,Arm))@self
	}

	node SimuationHandler {
		// --- initial setup of the scenario ---
		// insert info about items (id, warehouse destination sector, type and coordinates)  
		// in the arm robot's local knowledge (i.e., its tuple space) 			
		out(ITEM,"item1","sector1","red",0.583518, 0.0)@Arm
		out(ITEM,"item2","sector2","blue",0.554542, 0.187360)@Arm
		out(ITEM,"item3","sector2","red",0.504, 0.307)@Arm 
		out(ITEM,"item4","sector1","blue",0.332977,0.470854)@Arm

		// insert mapping between item types and destinations in the delivery robots' local knowledge: 
		// DeliveryRobot1 is in charge of delivering to the sector1 (left-hand side) 
		out(TYPE_2_DESTINATION,"red",-9.0,-9.0)@DeliveryRobot1	
		out(TYPE_2_DESTINATION,"blue",9.0,-9.0)@DeliveryRobot1
		// DeliveryRobot2 is in charge of delivering to the sector2 (right-hand side)	
		out(TYPE_2_DESTINATION,"red",9.0,9.0)@DeliveryRobot2
		out(TYPE_2_DESTINATION,"blue",-9.0,9.0)@DeliveryRobot2
		
		// activate the processes in charge of unloading items from delivery robots and posing them in the ground  
		// (there is one process for each pickup area)
		eval(new Unload(DeliveryRobot1,-9.0,-9.0))@self
		eval(new Unload(DeliveryRobot1,9.0,-9.0))@self
		eval(new Unload(DeliveryRobot2,-9.0,9.0))@self
		eval(new Unload(DeliveryRobot2,9.0,9.0))@self		
	}
}

