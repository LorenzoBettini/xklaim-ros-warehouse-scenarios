package xklaim.arm

import messages.JointTrajectory
import messages.XklaimToRosConnection
import ros.Publisher
import ros.SubscriptionRequestMsg

proc MoveArmTo(ArmTrajectory armTrajectory) {
	val local = self;

	// retrieve the ROS bridge URI 
	read("rosbridgeWebsocketURI",val String rosbridgeWebsocketURI)@self

	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(rosbridgeWebsocketURI)

	// initialize a publisher for the topic related to the control of the arm movements   
	val pub = new Publisher("/arm_controller/command", "trajectory_msgs/JointTrajectory", bridge)

	// set joint positions of the trajectory for performing the movement of the arm
	val JointTrajectory trajectory = new JointTrajectory().positions(armTrajectory.trajectoryPoints).jointNames(#[
		"joint1",
		"joint2",
		"joint3",
		"joint4",
		"joint5",
		"joint6"
	])

	// publish the movement's trajectory
	pub.publish(trajectory)

	// subscribe to the topic providing the actual status of the arm 
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/arm_controller/state").setType("control_msgs/JointTrajectoryControllerState").
			setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual joint positions from the arm's status	
			val actual = data.get("msg").get("actual").get("positions")

			// calculate the delta between the actual joint positions and the destination positions
			// to measure the completeness of the movement
			var delta = 0.0
			for (var i = 0; i < armTrajectory.trajectoryPoints.size; i++) {
				delta += Math.pow(actual.get(i).asDouble() - armTrajectory.trajectoryPoints.get(i), 2.0)
			}
			val norm = Math.sqrt(delta)

			if (norm <= armTrajectory.tolerance) { 
				// notify the completion of the movement
				out("MoveArmToCompleted")@local

				// unsubscribe from the arm state topic
				bridge.unsubscribe("/arm_controller/state")
			}
		]
	)
}
