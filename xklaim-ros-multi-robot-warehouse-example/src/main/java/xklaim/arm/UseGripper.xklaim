package xklaim.arm

import messages.JointTrajectory
import messages.XklaimToRosConnection
import ros.Publisher
import ros.SubscriptionRequestMsg

proc UseGripper(GripperTrajectory gripperTrajectory) {
	val local = self
	
	// retrieve the ROS bridge URI 
	read("rosbridgeWebsocketURI",val String rosbridgeWebsocketURI)@self
		
	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(rosbridgeWebsocketURI)

	// initialize a publisher for the topic related to the control of the arm's gripper
	val pub = new Publisher("/gripper_controller/command", "trajectory_msgs/JointTrajectory", bridge)

	// set joint positions for performing the gripper action
	val JointTrajectory trajectory = new JointTrajectory().positions(gripperTrajectory.trajectoryPoints).jointNames(#[
		"f_joint1",
		"f_joint2"
	])

	// publish the grip trajectory to activate the gripper
	pub.publish(trajectory)

	// subscribe to the topic providing the actual status of the gripper 
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/gripper_controller/state").setType(
			"control_msgs/JointTrajectoryControllerState").setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual joint positions from the gripper's status	
			val actual = data.get("msg").get("actual").get("positions")

			// calculate the delta between the actual joint positions and the destination positions
			// to measure the completeness of the gripper movement
			var delta = 0.0
			for (var i = 0; i < gripperTrajectory.trajectoryPoints.size; i++) {
				delta += Math.pow(actual.get(i).asDouble() - gripperTrajectory.trajectoryPoints.get(i), 2.0)
			}
			val norm = Math.sqrt(delta)

			if (norm <= gripperTrajectory.tolerance) { 
				// notify the completion of the gripper action
				out("UseGripperCompleted")@local

				// unsubscribe from the gripper state topic
				bridge.unsubscribe("/gripper_controller/state")
			}
		]
	)
}
