package xklaim.arm

import static xklaim.arm.ArmConstants.*
import static xklaim.GlobalConstants.*

proc PickAndReleaseOneItem() {
	// retrieve info about the item to be picked up  
	in(ITEM,var String itemId,var String sector, var String itemType,var Double x,var Double y)@self

	// define trajectories for the arm movement 
	val HALF_DOWN = new ArmTrajectory(#[-0.2169, -0.5822, 3.14, 1.66, -0.01412], x, y, 0.000001)
	val COMPLETE_DOWN = new ArmTrajectory(#[-0.9975, -0.4970, 3.1400, 1.6613, -0.0142], x, y, 0.000001)
	val UP = new ArmTrajectory(#[-0.2862, -0.5000, 3.1400, 1.6613, -0.0142], x, y, 0.008)
	val ROTATE = new ArmTrajectory(#[-0.9546, -0.20, -0.7241, 3.1400, 1.6613, -0.0142], 0.008)
	val LAY_DOWN = new ArmTrajectory(#[-0.9546, -0.0097, -0.9513, 3.1400, 1.7749, -0.0142], 0.002)
	val INITIAL_POSITION = new ArmTrajectory(#[0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 0.008)
	val CLOSE = new GripperTrajectory(#[0.0138, -0.0138], 0.007)
	val OPEN = new GripperTrajectory(#[0.0, 0.0], 0.00008)

	// move the arm half down
	eval(new MoveArm(HALF_DOWN))@self
	in(MOVE_ARM_TO_COMPLETED)@self

	// move the arm completely down
	eval(new MoveArm(COMPLETE_DOWN))@self
	in(MOVE_ARM_TO_COMPLETED)@self

	// close the gripper to grip the item
	eval(new UseGripper(CLOSE))@self
	in(USE_GRIPPER_COMPLETED)@self

	// move the arm up 
	eval(new MoveArm(UP))@self
	in(MOVE_ARM_TO_COMPLETED)@self

	// call for a delivery robot
	out(ITEM_READY_FOR_DELIVERY,sector)@self

	// rotate the arm
	eval(new MoveArm(ROTATE))@self
	in(MOVE_ARM_TO_COMPLETED)@self

	// wait for the arrival of a delivery robot
	in(DELIVERY_ROBOT_ARRIVED)@self

	// move the arm down to lay the item on the delivery robot's bowl  
	eval(new MoveArm(LAY_DOWN))@self
	in(MOVE_ARM_TO_COMPLETED)@self

	// open the gripper to release the item
	eval(new UseGripper(OPEN))@self
	in(USE_GRIPPER_COMPLETED)@self

	// notify that the gripper is opened
	out(GRIPPER_OPENED,itemId,itemType)@self

	// move the arm to the initial position
	eval(new MoveArm(INITIAL_POSITION))@self
	in(MOVE_ARM_TO_COMPLETED)@self

	// notify that the arm is in the initial position
	out(IS_IN_THE_INITIAL_POSITION)@self
}
