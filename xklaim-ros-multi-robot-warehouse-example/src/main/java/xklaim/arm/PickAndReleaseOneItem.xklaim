package xklaim.arm

proc PickAndReleaseOneItem(String rosbridgeWebsocketURI) {
	// retrieve info about the item to be picked up  
	in("item",var String itemId,var String sector, var String itemType,var Double x,var Double y)@self

	// define trajectories for the arm movement 
	val HALF_DOWN = new ArmTrajectory(#[-0.2169, -0.5822, 3.14, 1.66, -0.01412],x,y,0.000001)
	val COMPLETE_DOWN = new ArmTrajectory(#[-0.9975, -0.4970, 3.1400, 1.6613, -0.0142],x,y,0.000001)
	val UP = new ArmTrajectory(#[-0.2862, -0.5000, 3.1400, 1.6613, -0.0142],x,y,0.008)
	val ROTATE = new ArmTrajectory(#[-0.9546, -0.20, -0.7241, 3.1400, 1.6613, -0.0142],0.008)
	val LAY_DOWN = new ArmTrajectory(#[-0.9546, -0.0097, -0.9513, 3.1400, 1.7749, -0.0142],0.002)
	val INITIAL_POSITION = new ArmTrajectory(#[0.000, 0.000, 0.000, 0.000, 0.000, 0.000],0.008)
	val CLOSE = new GripperTrajectory(#[0.0138, -0.0138],0.007)
	val OPEN = new GripperTrajectory(#[0.0, 0.0],0.0008)

	eval(new MoveArmTo(rosbridgeWebsocketURI,HALF_DOWN))@self

	in("MoveArmToCompleted")@self

	eval(new MoveArmTo(rosbridgeWebsocketURI,COMPLETE_DOWN))@self

	in("MoveArmToCompleted")@self

	// grip the item
	eval(new UseGripper(rosbridgeWebsocketURI,CLOSE))@self
	
	in("UseGripperCompleted")@self

	// get up the arm
	eval(new MoveArmTo(rosbridgeWebsocketURI,UP))@self

	in("MoveArmToCompleted")@self
	
	// call for a delivery robot
	out("itemReadyForTheDelivery",sector)@self

	// rotate the arm
	eval(new MoveArmTo(rosbridgeWebsocketURI,ROTATE))@self

	in("MoveArmToCompleted")@self
	
	// wait for the arrival of a delivery robot
	in("deliveryRobotArrived")@self

	// lay the item on the bowl on the top of the delivery robot 
	eval(new MoveArmTo(rosbridgeWebsocketURI,LAY_DOWN))@self

	in("MoveArmToCompleted")@self

	// release the 
	eval(new UseGripper(rosbridgeWebsocketURI,OPEN))@self
	
	in("UseGripperCompleted")@self
	
	out("gripperOpened",itemId,itemType)@self
		
	eval(new MoveArmTo(rosbridgeWebsocketURI,INITIAL_POSITION))@self
	
	in("MoveArmToCompleted")@self
	
	out("initialPosition")@self	
}
