package xklaim.arm

import messages.JointTrajectory
import messages.XklaimToRosConnection
import ros.Publisher
import ros.SubscriptionRequestMsg

proc GetDown(String rosbridgeWebsocketURI, Double x, Double y, double[] positions) {
	val local = self;

	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(rosbridgeWebsocketURI)

	// initialize a publisher for the topic related to the control of the movements of the arm robot 
	val pub = new Publisher("/arm_controller/command", "trajectory_msgs/JointTrajectory", bridge)

	val trajectoryPositions = #[Math.atan(y / x) - 3.14, positions.get(0), positions.get(1), positions.get(2), positions.get(3), positions.get(4)]

	// set joint positions for performing the first movement of the arm
	val JointTrajectory movement = new JointTrajectory().positions(trajectoryPositions).jointNames(#[
		"joint1",
		"joint2",
		"joint3",
		"joint4",
		"joint5",
		"joint6"
	])

	// publish the first movement trajectory
	pub.publish(movement)

	// subscribe to the topic providing the actual status of the arm 
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/arm_controller/state").setType("control_msgs/JointTrajectoryControllerState").
			setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual joint positions from the arm's status	
			val actual = data.get("msg").get("actual").get("positions")

			// calculate the delta between the actual joint positions and the destination positions
			// to measure the completeness of the first and second movements
			var delta = 0.0
			val tolerance = 0.000001
			for (var i = 0; i < trajectoryPositions.size; i++) {
				delta += Math.pow(actual.get(i).asDouble() - trajectoryPositions.get(i), 2.0)
			}
			val norm = Math.sqrt(delta)

			if (norm <= tolerance) { /* the arm has completed the movement */
				// notify the completion of the movement
				out("getDownCompleted")@local

				// unsubscribe from the arm state topic
				bridge.unsubscribe("/arm_controller/state")
			}
		]
	)
}
