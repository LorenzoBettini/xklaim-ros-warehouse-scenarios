package xklaim.singleDeliveryRobot

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import messages.Odometry
import messages.XklaimToRosConnection
import ros.Publisher
import ros.SubscriptionRequestMsg
import ros.msgs.geometry_msgs.Twist

import static xklaim.singleDeliveryRobot.DeliveryRobotConstants.*

proc MoveTo(String robotId, Double x, Double y) {
	val local = self

	// set the tolerance for distance and angle error 
	val distanceTolerance = 0.1;
	val angleTolerance = 0.1;

	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(ROS_BRIDGE_SOCKET_URI)

	// initialize a publisher for the topic related to the control of the robot's wheels
	val pub = new Publisher("/" + robotId + "/cmd_vel", "geometry_msgs/Twist", bridge)

	// create the message for sending velocity commands
	val vel_msg = new Twist()

	// value of pi
	val PI = 3.141592654;

	// gain K used to calculate the linear velocity
	val double K_l = 0.5;

	// gain K used to calculate the angular velocity
	val double K_a = 0.5;

	// subscribe to the robot's odometry sensor data
	bridge.subscribe(
		// request odometry data from the odom topic with a rate of 1Hz, and a buffer of 1 message
		SubscriptionRequestMsg.generate("/" + robotId + "/odom").setType("nav_msgs/Odometry").setThrottleRate(1).
			setQueueLength(1),
		[ data, stringRep |
			// extract the robot's position from the odometry sensor
			var mapper = new ObjectMapper();
			var JsonNode rosMsgNode = data.get("msg");
			var Odometry odom = mapper.treeToValue(rosMsgNode, Odometry);
			var double currentX = odom.pose.pose.position.x;
			var double currentY = odom.pose.pose.position.y;
			var angle = new EulerAngles(odom.pose.pose.orientation)
			var currentTheta = angle.yaw

			// calculate the error in heading and distance between current position and destination
			var deltaX = x - currentX; // calculating the distance error in x-axis
			var deltaY = y - currentY; // calculating the distance error in y-axis
			var angular = Math.atan2(deltaY, deltaX) // calculating the angle error
			var headingError = angular - currentTheta
			if (headingError > PI) {
				headingError = headingError - (2 * PI); // wrap angle to [-PI,PI]
			}
			if (headingError < -PI) {
				headingError = headingError + (2 * PI); // wrap angle to [-PI,PI]
			}
			
			// calculate the distance to the destination
			var distance = Math.sqrt(Math.pow((x - currentX), 2) + Math.pow((y - currentY), 2)) // calculating the norm of the distance error
			
			
			// if the distance is greater than the distance tolerance then 
			// move towards the destination, otherwise stop the wheels
			// and notify the arrival to the destination position	
			if ((distance > distanceTolerance)) { 
				if (Math.abs(headingError) > angleTolerance) {
					// if the robot's heading is off, fix it
					vel_msg.linear.x = 0.0;
					// calculating angular velocity to correct heading
					vel_msg.angular.z = K_a * headingError; 
				} else {
					// fix the distance gap between current pose and waypoint:
					// the magnitude of the robot's velocity is directly
					// proportional to the distance the robot is from the goal
					vel_msg.linear.x = K_l * distance; 
					vel_msg.angular.z = 0.0;
				}
				// publish the velocity message leading to the destination direction
				pub.publish(vel_msg)				
			} else {
				// the robot reached the goal and stops moving
				vel_msg.linear.x = 0
				vel_msg.angular.z = 0
				pub.publish(vel_msg)

				// notify that the robot is arrived at destination 
				out(MOVE_TO_COMPLETED)@local

				// unsubscribe from the robot state topic
				bridge.unsubscribe("/" + robotId + "/odom")
			}
		]
	)
}