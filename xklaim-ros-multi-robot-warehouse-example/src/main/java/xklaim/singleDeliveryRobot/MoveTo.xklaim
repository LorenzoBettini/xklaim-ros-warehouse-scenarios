package xklaim.singleDeliveryRobot

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import messages.PoseStamped
import messages.PoseWithCovarianceStamped
import messages.XklaimToRosConnection
import ros.Publisher
import ros.SubscriptionRequestMsg
import ros.msgs.geometry_msgs.Twist

import static xklaim.GlobalConstants.*
import static xklaim.singleDeliveryRobot.DeliveryRobotConstants.*

proc MoveTo(String robotId, Double x, Double y) {
	val local = self

	// retrieve the ROS bridge URI 
	read(ROS_BRIDGE_SOCKET_URI,val String rosbridgeWebsocketURI)@self

	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(rosbridgeWebsocketURI)

	// initialize a publisher for the topic related to the control of the robot's wheels
	val pub = new Publisher("/" + robotId + "/cmd_vel", "geometry_msgs/Twist", bridge)

	// waiting until the destination position is reached
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/" + robotId + "/odom").setType("nav_msgs/Odometry").setThrottleRate(1).
			setQueueLength(1),
		[ data, stringRep |
			// Extract the position coordinates from the Json message
			val pose = data.get("msg").get("pose").get("pose")
			val position = pose.get("position")
			val currentX = position.get("x").asDouble();
			val currentY = position.get("y").asDouble();
			// Extract the orientation data from the Json message and compute the theta angle
			val orientation = pose.get("orientation")
			val qx = orientation.get("x").asDouble();
			val qy = orientation.get("y").asDouble();
			val qz = orientation.get("z").asDouble();
			val qw = orientation.get("w").asDouble();
			val siny_cosp = 2 * (qw * qz + qx * qy);
			val cosy_cosp = 1 - 2 * (qy * qy + qz * qz);
			val currentTheta = Math.atan2(siny_cosp, cosy_cosp);

			// Calculate the distance to the destination 
			val distance = Math.sqrt(Math.pow(currentX - x, 2) + Math.pow(currentY - y, 2))

			// If the distance is greater than the tolerance then 
			// move towards the destination, otherwise stop the wheels
			// and notify the arrival to the destination position
			val tolerance = 0.16
			if (distance >= tolerance) {
				// Set linear velocity
				var linearVelocity = 1.5
				if (distance < 1) {
					linearVelocity *= distance
				}

				// Calculate the steering angle
				val steeringAngle = Math.atan2(y - currentY, x - currentX)

				// Set the angular velocity
				val angularVelocity = 1.0 * (steeringAngle - currentTheta)

				// publish the destination direction
				val destination = new Twist();
				destination.linear.x = linearVelocity
				destination.angular.z = angularVelocity
				pub.publish(destination)
			} else {
				// stop the wheels
				//val pubvel = new Publisher("/" + robotId + "/cmd_vel", "geometry_msgs/Twist", bridge)
				val twistMsg = new Twist()
				//pubvel.publish(twistMsg)
				pub.publish(twistMsg)

				// notify that the robot is arrived at destination 
				out(MOVE_TO_COMPLETED)@local

				// unsubscribe from the robot state topic
				bridge.unsubscribe("/" + robotId + "/odom")
			}

		]
	)

/*
 * // Subscribe to the Pose topic of the robot
 * bridge.subscribe(
 * 	SubscriptionRequestMsg.generate("/" + robotId + "/odom").setType("nav_msgs/Odometry").
 * 		setThrottleRate(1).setQueueLength(1), [ data, stringRep |
 * 		// Extract the position coordinates from the Json message
 * 		val pose = data.get("msg").get("pose").get("pose")
 * 		val position = pose.get("position")
 * 		val x = position.get("x").asDouble();
 * 		val y = position.get("y").asDouble();
 * 		// Extract the orientation data from the Json message and compute the theta angle
 * 		val orientation = pose.get("orientation")
 * 		val qx = orientation.get("x").asDouble();
 * 		val qy = orientation.get("y").asDouble();
 * 		val qz = orientation.get("z").asDouble();
 * 		val qw = orientation.get("w").asDouble();
 * 		val siny_cosp = 2 * (qw * qz + qx * qy);
 * 		val cosy_cosp = 1 - 2 * (qy * qy + qz * qz);
 * 		val theta = Math.atan2(siny_cosp, cosy_cosp);

 * 		println("position x:"+x+" y:"+y+"theta:"+theta)
 ]) */
}