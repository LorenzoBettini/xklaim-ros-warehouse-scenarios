package Test

import messages.XklaimToRosConnection
import ros.Publisher
import messages.JointTrajectory
import ros.SubscriptionRequestMsg

net TesGrip physical "localhost:9999" {
	node Arm {
		
				
	    //measuring elapsed time using System.nanoTime
		
		val startTime = System.nanoTime();

		
		
		val rosbridgeWebsocketURI = "ws://0.0.0.0:9090"

		// connect to the ROS bridge
		val bridge = new XklaimToRosConnection(rosbridgeWebsocketURI)

		// initialize a publisher for the topic related to the control of the movements of the arm robot 
		val pub = new Publisher("/gripper_controller/command", "trajectory_msgs/JointTrajectory", bridge)


		// set joint positions for performing the first movement of the arm
	val gripperPositions = #[0.0138, -0.0138]
	val JointTrajectory grip = new JointTrajectory().positions(gripperPositions).jointNames(#[
		"f_joint1",
		"f_joint2"
	])

	// publish the grip trajectory to activate the gripper
	pub.publish(grip)

	// subscribe to the topic providing the actual status of the gripper 
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/gripper_controller/state").setType(
			"control_msgs/JointTrajectoryControllerState").setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual joint positions from the gripper's status	
			val actual = data.get("msg").get("actual").get("positions")

			// calculate the delta between the actual joint positions and the destination positions
			// to measure the completeness of the gripper movement
			var delta = 0.0
			val tolerance = 0.007
			for (var i = 0; i < gripperPositions.size; i++) {
				delta += Math.pow(actual.get(i).asDouble() - gripperPositions.get(i), 2.0)
			}
			val norm = Math.sqrt(delta)

			if (norm <= tolerance) { /* the gripper has completed the grip movement */
				// activate the grip Process
				 var elapsedTime = System.nanoTime() - startTime;
				 println("Total execution time to perform Close gripper process in millis: "
                + elapsedTime/1000000 + "ms.");
				// unsubscribe from the arm state topic
				bridge.unsubscribe("/gripper_controller/state")
			}
		]
	)
}
}	
	

	
	

